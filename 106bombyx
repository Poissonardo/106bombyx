#!/usr/bin/python3
from sys import argv

def get_i0_num(n, k, i0):
    populations = [n]
    first_gen = 0
    for i in range(0, i0):
        if i != 0:
            populations.append(populations[i - 1] * k * (1000 - populations[i - 1]) / 1000)
        first_gen = populations[i]
    return first_gen


def case1(args):
    n = int(args[1])
    k = float(args[2])
    populations = [n]
    for i in range(0, 100):
        if i != 0:
            populations.append(populations[i - 1] * k * (1000 - populations[i - 1]) / 1000)
        print(f"{i + 1} {populations[i]:.2f}")

def case2(args):
    k = 1.00
    n = int(args[1])
    i0 = int(args[2])
    i1 = int(args[3])

    while (k <= 4):
        i0_individuals_number = get_i0_num(n, k, i0)
        populations = [i0_individuals_number]
        for i in range(i1 - (i0 - 1)):
            if i != i1:
                populations.append(populations[i - 1] * k * (1000 - populations[i - 1]) / 1000)
            print(f"{k:.2f} {populations[i]:.2f}")
        k += 0.01

def main(args):
    if len(args) == 3:
        case1(args)
        exit(0)
    elif len(args) == 4:
        case2(args)
        exit(0)
    else:
        print("USAGE\n\t./106bombyx n [k | i0 i1]\nDESCRIPTION\n\tn\tnumber of first generation individuals\n\tk\tgrowth rate from 1 to 4\n\ti0\tinitial generation (included)\n\ti1\tfinal generation (included)")
        exit(84)


if __name__ == '__main__':
    main(argv)
